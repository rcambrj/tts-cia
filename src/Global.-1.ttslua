--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ --]]

config = {
    handSize = 7,
    minPlayers = 2,
    maxPlayers = 5,
    crisisCardsRowSize = {
        [2] = 5,
        [3] = 10,
        [4] = 10,
        [5] = 10,
    },
}

crisisDeck = nil
crisisCards = nil
techniqueDeck = nil 
techniqueCards = nil
realityCheckDeck = nil
collectionDeckTrigger = nil

crisisTrigger1 = nil
crisisTrigger2 = nil
crisisTrigger3 = nil
crisisTrigger4 = nil
crisisTrigger5 = nil
crisisTrigger6 = nil
crisisTrigger7 = nil
crisisTrigger8 = nil
crisisTrigger9 = nil
crisisTrigger10 = nil

crisisTriggers = {}

-- globals for convenience
collectionDeck = nil

CRISIS_ASPECTS = {
    MILITARY = {
        name = "Military",
        icon = "https://vignette.wikia.nocookie.net/meme/images/d/d0/Trolol2.png/revision/latest/scale-to-width-down/185?cb=20181102142005",
    },
    POLITICAL = {
        name = "Political",
        icon = "https://vignette.wikia.nocookie.net/meme/images/1/1e/6FbyRC4u.png/revision/latest/scale-to-width-down/185?cb=20181102135746",
    },
    ECONOMIC = {
        name = "Economic",
        icon = "https://vignette.wikia.nocookie.net/meme/images/6/66/JoW88EU0.png/revision/latest/scale-to-width-down/185?cb=20181102141417",
    },
    WEAPONS = {
        name = "Weapons",  
        icon = "https://t09.deviantart.net/ju0dgmwIS16XNTsHHodQCptLCi0=/fit-in/150x150/filters:no_upscale():origin()/pre05/0a84/th/pre/f/2011/128/5/4/trollface_colored_by_fuerawebadas-d3fwi18.png",
    },
}

--[[ The onLoad event is called after the game save finishes loading. --]]
function onLoad()
    broadcastToAll('Waiting for assets...')
    Wait.condition(
        || broadcastToAll('Ready'),
		function()
			local refs = {
				crisisDeck,
				techniqueDeck,
				realityCheckDeck,
				collectionDeckTrigger,
				crisisTrigger1,
				crisisTrigger2,
				crisisTrigger3,
				crisisTrigger4,
				crisisTrigger5,
				crisisTrigger6,
				crisisTrigger7,
				crisisTrigger8,
				crisisTrigger9,
				crisisTrigger10,
			}
			local ready = true;

			for _, ref in pairs(refs) do
				if ref == nil then
					ready = false
				end
			end

			crisisTriggers = {
				crisisTrigger1,
				crisisTrigger2,
				crisisTrigger3,
				crisisTrigger4,
				crisisTrigger5,
				crisisTrigger6,
				crisisTrigger7,
				crisisTrigger8,
				crisisTrigger9,
				crisisTrigger10
			}

			log(refs)
			return ready
		end
    )
end

--[[ The onUpdate event is called once per frame. --]]
function onUpdate()
    --[[ print('onUpdate loop!') --]]
end

function start()
    if not (config.minPlayers <= #getSeatedPlayers() and #getSeatedPlayers() <= config.maxPlayers) then
        broadcastToAll('This game plays 2-5 players :(')
        return
    end

    broadcastToAll('Starting game...')
    UI.hide("startButton")
 
    combineCollectionDeck(function()
        collectionDeck.shuffle()
        crisisDeck.shuffle()
        dealCollectionCards()
        fillCrisisCardsRow()
        broadcastToAll('Game started')
    end)
end

function combineCollectionDeck(callback) 
    local position = collectionDeckTrigger.getPosition()
    local techniqueDeckClone = techniqueDeck.clone({
        position = position
    })
    local realityCheckDeckClone = realityCheckDeck.clone({
        position = position
    })
    
    Wait.condition(
        function()
            collectionDeck = collectionDeckTrigger.getObjects()[1]
            collectionDeck.setName('Collection Deck')
            if callback ~= nil then
                callback()
            end
        end,
        || #collectionDeckTrigger.getObjects() == 1
    )
end

function dealCollectionCards()
    local players = getSeatedPlayers()

    for _, playerColor in pairs(players) do
        local player = Player[playerColor]
        local hand = player.getHandObjects()[1]
        local handSize = hand ~= nil and #hand.getObjects() or 0
        local handNeeds = config.handSize - handSize
        collectionDeck.deal(handNeeds, playerColor)
    end
end

function fillCrisisCardsRow()
    local players = getSeatedPlayers()
    local max = config.crisisCardsRowSize[#players]
    for key, crisisTrigger in pairs(crisisTriggers) do
        if (key > max) then
            return
        end

		crisisDeck.takeObject({
			flip = true,
			position = crisisTrigger.getPosition()
		})
	end
end

-- helper function to put zero or more cards into a location
-- works when there is:
-- * nothing in the destination
-- * one card in the destination
-- * a deck in the destination
function putCards(items, destination, callback)
	if (#items < 1) then
		if callback ~= nil then
			callback()
		end
		return
	end
	
	local thingsInDestination = destination.getObjects()
	if (#thingsInDestination < 1) then
		local r = destination.getRotation()
		r.z = 180 -- ensure decks are placed face-down
		items[1].setRotation(r)
		local position = destination.getPosition()
		local positionAbove = {
			position[1],
			position[2] + 2,
			position[3],
		}
		items[1].setPosition(positionAbove, false, true)
		items[1].setPositionSmooth(positionAbove, false, true) -- fix stacking
		Wait.condition(function()
			if #items > 1 then
				Wait.frames(|| putCards(slice(items, 2), destination, destination, callback), 1)
			elseif callback ~= nil then
				Wait.frames(|| callback(), 1)
			end	
		end, || not items[1].isSmoothMoving())
	else
		local target = nil
		for _, thingInZone in pairs(thingsInDestination) do
			if thingInZone.tag == "Deck" or thingInZone.tag == "Card" then
				target = thingInZone
			end
		end

		if target.tag == "Deck" then
			for _, sourceItem in pairs(items) do
				target.putObject(sourceItem)
			end
			if callback ~= nil then
				Wait.frames(|| callback(), 1)
			end
		elseif target.tag == "Card" then
			target.putObject(items[1])
			if #items > 1 then
				Wait.frames(|| putCards(slice(items, 2), destination, destination, callback), 1)				
			elseif callback ~= nil then
				Wait.frames(|| callback(), 1)
			end
		end
	end
end