--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ --]]

config = {
    handSize = 7,
    minPlayers = 2,
    maxPlayers = 5,
    crisisCardsRowSize = {
        ['2'] = 5,
        ['3'] = 10,
        ['4'] = 10,
        ['5'] = 10,
    },
}

crisisDeck = nil
crisisCards = nil
techniqueDeck = nil 
techniqueCards = nil
realityCheckDeck = nil
collectionDeckTrigger = nil

-- globals for convenience
collectionDeck = nil

CRISIS_ASPECTS = {
    MILITARY = {
        name = "Military",
        icon = "https://vignette.wikia.nocookie.net/meme/images/d/d0/Trolol2.png/revision/latest/scale-to-width-down/185?cb=20181102142005",
    },
    POLITICAL = {
        name = "Political",
        icon = "https://vignette.wikia.nocookie.net/meme/images/1/1e/6FbyRC4u.png/revision/latest/scale-to-width-down/185?cb=20181102135746",
    },
    ECONOMIC = {
        name = "Economic",
        icon = "https://vignette.wikia.nocookie.net/meme/images/6/66/JoW88EU0.png/revision/latest/scale-to-width-down/185?cb=20181102141417",
    },
    WEAPONS = {
        name = "Weapons",  
        icon = "https://t09.deviantart.net/ju0dgmwIS16XNTsHHodQCptLCi0=/fit-in/150x150/filters:no_upscale():origin()/pre05/0a84/th/pre/f/2011/128/5/4/trollface_colored_by_fuerawebadas-d3fwi18.png",
    },
}

--[[ The onLoad event is called after the game save finishes loading. --]]
function onLoad()
    broadcastToAll('Waiting for assets...')
    Wait.condition(
        || broadcastToAll('Ready!'),
        || 
            crisisDeck ~= nil and
            techniqueDeck ~= nil and
            realityCheckDeck ~= nil and
            collectionDeckTrigger ~= nil
    )
end

--[[ The onUpdate event is called once per frame. --]]
function onUpdate()
    --[[ print('onUpdate loop!') --]]
end

function start()
    -- if not (config.minPlayers <= #getSeatedPlayers() and #getSeatedPlayers() <= config.maxPlayers) then
    --     broadcastToAll('This game plays 2-5 players :(')
    --     return
    -- end

    broadcastToAll('Starting game...')
    UI.hide("startButton")
 
    combineCollectionDeck(function() 
        collectionDeck.shuffle()
        crisisDeck.shuffle()
        dealCollectionCards()
        fillCrisisCardsRow()
        broadcastToAll('Game started!')
    end)
end

function combineCollectionDeck(callback) 
    local position = collectionDeckTrigger.getPosition()
    local techniqueDeckClone = techniqueDeck.clone({
        position = position
    })
    local realityCheckDeckClone = realityCheckDeck.clone({
        position = position
    })
    
    Wait.condition(
        function()
            collectionDeck = collectionDeckTrigger.getObjects()[1]
            collectionDeck.setName('Collection Deck')
            if callback ~= nil then
                callback()
            end
        end,
        || #collectionDeckTrigger.getObjects() == 1
    )
end

function dealCollectionCards()
    local players = getSeatedPlayers()

    for _, playerColor in pairs(players) do
        local player = Player[playerColor]
        local hand = player.getHandObjects()[1]
        local handSize = hand ~= nil and #hand.getObjects() or 0
        local handNeeds = config.handSize - handSize
        collectionDeck.deal(handNeeds, playerColor)
    end
end

function fillCrisisCardsRow()
    -- TODO
end
